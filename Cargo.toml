[package]
name = "bevy"
version = "0.16.1"
edition = "2024"
categories = ["game-engines", "graphics", "gui", "rendering"]
description = "A refreshingly simple data-driven game engine and app framework"
exclude = ["assets/", "tools/", ".github/", "crates/", "examples/wasm/assets/"]
homepage = "https://bevyengine.org"
keywords = ["game", "engine", "gamedev", "graphics", "bevy"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/bevyengine/bevy"
documentation = "https://docs.rs/bevy"
rust-version = "1.85.0"

[workspace]
resolver = "2"
members = [
  # All of Bevy's official crates are within the `crates` folder!
  "crates/bevy_ecs",
  # Several crates with macros have "compile fail" tests nested inside them, also known as UI
  # tests, that verify diagnostic output does not accidentally change.
  # TODO: Use a glob pattern once they are fixed in `dependabot-core`
  # TODO: See https://github.com/bevyengine/bevy/issues/17876 for context.
  # "crates/bevy_derive/compile_fail",
  # "crates/bevy_ecs/compile_fail",
  # "crates/bevy_reflect/compile_fail",
  # # Examples of compiling Bevy for mobile platforms.
  # "examples/mobile",
  # # Examples of using Bevy on no_std platforms.
  # "examples/no_std/*",
  # # Benchmarks
  # "benches",
  # # Internal tools that are not published.
  # "tools/*",
  # # Bevy's error codes. This is a crate so we can automatically check all of the code blocks.
  # "errors",
]
exclude = [
  # Integration tests are not part of the workspace
  "tests-integration",
]

[workspace.lints.clippy]
manual_let_else = "warn"

[workspace.lints.rust]
unused_qualifications = "warn"

# Unfortunately, cargo does not currently support overriding workspace lints
# inside a particular crate. See https://github.com/rust-lang/cargo/issues/13157
#
# We require an override for cases like `std_instead_of_core`, which are intended
# for the library contributors and not for how users should consume Bevy.
# To ensure examples aren't subject to these lints, below is a duplication of the
# workspace lints, with the "overrides" applied.
#
# [lints]
# workspace = true

[lints.clippy]
allow_attributes_without_reason = "warn"

[lints.rust]
unused_qualifications = "warn"
